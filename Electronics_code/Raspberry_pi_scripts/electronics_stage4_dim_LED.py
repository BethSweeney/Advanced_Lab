## Import relevant packages for raspberry pi
from machine import Pin,PWM
from time import sleep
import time as time

# Choose output pin for PWM and "activate"
pin_PWM = Pin(3)
pwm = PWM(pin_PWM)

# Set frequency and duty cycle 
pwm.freq(100000)
pwm.duty_u16(32767)    ## duty cycle of 50%

# Loop to dim LED

# set up green and red led 
red_LED = machine.Pin(6,Pin.OUT)
#red_LED.value(0)
green_LED = machine.Pin(25,Pin.OUT)

# get 
led_pwm = PWM(red_LED)
led_pwm_green = PWM(green_LED)
steps_to_increase = range(0,100,1)
steps_to_decrease = range(99,-1,-1)



steps = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1,
       0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,
       0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,
       0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,
       0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54,
       0.55, 0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65,
       0.66, 0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76,
       0.77, 0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87,
       0.88, 0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,
       0.99, 0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.9,
       0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.8 , 0.79,
       0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7 , 0.69, 0.68,
       0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6 , 0.59, 0.58, 0.57,
       0.56, 0.55, 0.54, 0.53, 0.52, 0.51, 0.5 , 0.49, 0.48, 0.47, 0.46,
       0.45, 0.44, 0.43, 0.42, 0.41, 0.4 , 0.39, 0.38, 0.37, 0.36, 0.35,
       0.34, 0.33, 0.32, 0.31, 0.3 , 0.29, 0.28, 0.27, 0.26, 0.25, 0.24,
       0.23, 0.22, 0.21, 0.2 , 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13,
       0.12, 0.11, 0.1 , 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02,
       0.01]




# Set up logspace - calculated in jupyter notebook w numpy
logspace = [1.00000000e+00, 1.11853947e+00, 1.25113054e+00, 1.39943889e+00, 1.56532762e+00, 1.75088073e+00, 1.95842919e+00, 2.19058035e+00,
            2.45025057e+00, 2.74070197e+00, 3.06558332e+00, 3.42897593e+00, 3.83544491e+00, 4.29009650e+00, 4.79864226e+00, 5.36747075e+00,
            6.00372787e+00, 6.71540657e+00, 7.51144729e+00, 8.40185024e+00, 9.39780109e+00, 1.05118114e+01, 1.17578759e+01, 1.31516483e+01,
            1.47106377e+01, 1.64544288e+01, 1.84049280e+01, 2.05866384e+01, 2.30269675e+01, 2.57565720e+01, 2.88097423e+01, 3.22248337e+01,
            3.60447483e+01, 4.03174736e+01, 4.50966854e+01,5.04424225e+01, 5.64218403e+01, 6.31100552e+01, 7.05910875e+01, 7.89589173e+01,
            8.83186653e+01, 9.87879128e+01, 1.10498179e+02, 1.23596575e+02, 1.38247647e+02, 1.54635449e+02, 1.72965853e+02, 1.93469132e+02,
            2.16402860e+02, 2.42055140e+02 ,2.70748227e+02, 3.02842578e+02,3.38741375e+02, 3.78895597e+02, 4.23809679e+02, 4.74047853e+02,
            5.30241232e+02, 5.93095745e+02, 6.63400999e+02, 7.42040199e+02,8.30001249e+02, 9.28389154e+02, 1.03843991e+03, 1.16153602e+03,
            1.29922388e+03, 1.45323319e+03, 1.62549868e+03, 1.81818442e+03,2.03371104e+03, 2.27478606e+03, 2.54443798e+03, 2.84605431e+03,
            3.18342407e+03, 3.56078546e+03, 3.98287907e+03, 4.45500743e+03, 4.98310163e+03, 5.57379584e+03, 6.23451063e+03, 6.97354619e+03,
            7.80018664e+03, 8.72481660e+03, 9.75905171e+03, 1.09158845e+04, 1.22098476e+04, 1.36571965e+04, 1.52761132e+04, 1.70869356e+04,
            1.91124118e+04, 2.13779869e+04, 2.39121221e+04, 2.67466522e+04, 2.99171861e+04, 3.34635534e+04, 3.74303052e+04, 4.18672736e+04,
            4.68301979e+04, 5.23814246e+04, 5.85906908e+04, 6.55340000e+04]

try:
    
    while True:
        start = time.ticks_ms()   # start timer to check frequency

        for i in steps_to_increase:
            
            #duty_cycle_percentage = 65535*(int(i)/100)   #Get percentages of duty cycles
            duty_cycle_percentage = logspace[i]   #Duty cycle logspace
            #duty_cycle_percentage = 65535*i   #Duty cycle logspace
            #print(duty_cycle_percentage)

            sleep(0.02)
            led_pwm.duty_u16(int(duty_cycle_percentage))            
        
        #sleep(0.025)

        for i in steps_to_decrease:
    
            #duty_cycle_percentage1 = 65535*(int(i)/100)   #Get percentages of duty cycles
            duty_cycle_percentage1 = logspace[i]   #Duty cycle logspace
    
            led_pwm.duty_u16(int(duty_cycle_percentage1))
            sleep(0.02)  
 
        end = time.ticks_ms()
        print(time.ticks_diff(end, start))
    

except KeyboardInterrupt:
    print("End of Programme")
    led_pwm.duty_u16(int(0))
    print(led_pwm)
    led_pwm.deinit()
    



